package com.df.Password_Vault_Setup;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;

public class Uninstall extends JFrame implements PropertyChangeListener
{	
	/**
	 * Primary Release Version 1.0
	 */
	private static final long serialVersionUID = 1L;
	private WindowListener exitListener = new WindowAdapter()
	{
		@Override
		public void windowClosing (WindowEvent e)
		{
			btnCancelActionPerformed(); //if window closing, go to exit menu
		}
	};
	
	private WindowListener uninstallExitList = new WindowAdapter()
	{
		@Override
		public void windowClosing (WindowEvent e)
		{
			btnCancelunInstallActionPerformed(); //if window closing, go to exit menu
		}
	};
	
	public Uninstall() //constructor of class, start initComponents
	{
		initComponents();
	}
	
	private void initComponents () //method to build initial view for user for installation
	{
		//instantiating elements of the GUI
		pnlStart = new JPanel();
		lblArtTop = new JLabel();
		lblWelcome = new JLabel();
		lblMainTxt = new JLabel();
		lblDivider = new JLabel();
		btnStartNext = new JButton();
		btnBackCancel = new JButton();
		
		pnlStart.setVisible(true);
		add(pnlStart); //adding the panel to the frame
		
		removeWindowListener(exitListener);
		removeWindowListener(uninstallExitList);
		addWindowListener(exitListener); //removing before adding the windowlistener, ensures there is only one listener there
		setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE); //setting "x" button to do nothing except what exitListener does
		setPreferredSize(new Dimension(750, 500)); //setting measurements of jframe
		
		runDir = System.getProperty("user.dir");
		imgDir = runDir.substring(0, runDir.length()-4);
		imgDir = imgDir + "assets\\assets_pv1.0";
		appDir = imgDir.substring(0, imgDir.length()-13);
		
		try
		{
			Image frameIcon = ImageIO.read(new File(imgDir + "\\Logo.png"));
			setIconImage(frameIcon); //trying to read and add the logo to the application
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
		setTitle("Password_Vault 1.0 Setup"); //setting title on JFrame
		setResizable(false); //disabling resizing
		setLayout(null); //ensuring I can specify element positions
		setBackground(Color.WHITE); //setting background color

		Icon topArt = new ImageIcon(imgDir+"\\topArt.jpg");
		lblArtTop.setIcon(topArt); //reading in Art to be displayed at top of JFrame
			
		lblArtTop.setBounds(0, 0, 750, 100); //setting position and measurements of art
		add(lblArtTop); //adding art to frame
		
		lblWelcome.setText("Password_Vault Setup Wizard"); //label welcoming user
		lblWelcome.setFont(lblWelcome.getFont().deriveFont(22.0f)); //changing font size to 22
		lblWelcome.setFont(lblWelcome.getFont().deriveFont(Font.BOLD)); //changing font style to bold
		lblWelcome.setBounds(208, 125, 334, 25); //setting position and measurements
		add(lblWelcome); //adding label to form
		
		lblMainTxt.setText("<html>The following wizard will set up the necessary files and directories on your computer to be used by the Password_Vault system."
				+ "<br><br><br>"
				+ "This installation process shouldn't take more than a few minutes and you can continue to use your computer while this takes place."
				+ "<br><br><br>"
				+ "Click 'Next' to continue."
				+ "<br><br>"
				+ "</html>"); //main label that explains what happens, html used for formatting
		lblMainTxt.setFont(lblMainTxt.getFont().deriveFont(16.0f)); //changing font size to 16
		lblMainTxt.setBounds(20, 180, 730, 194); //setting position and measurements
		add(lblMainTxt); //adding label to JFrame
		
		lblDivider.setText(""); //ensuring no text in label
		lblDivider.setBounds(10, 385, 730, 10); //setting bounds and position of dividing line
		lblDivider.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY)); //setting border to label for the dividing
		add(lblDivider); //adding it to JFrame
		
		btnStartNext.setText("Next"); //adding text to button for starting
		btnStartNext.setFont(lblMainTxt.getFont().deriveFont(14.0f)); //setting font size
		btnStartNext.setBounds(645, 415, 80, 35); //positioning start button
		
		btnStartNext.addActionListener(new ActionListener() //add listener for action to run method
		{
			public void actionPerformed (ActionEvent evt) 
			{
				btnNextActionPerformed(); //running start method
			}
		});
		
		add(btnStartNext); //adding button to JFrame
		
		btnBackCancel.setText("Cancel"); //adding text to button for exiting
		btnBackCancel.setFont(btnStartNext.getFont()); //getting font from start button
		btnBackCancel.setBounds(20, 415, 80, 35); //positioning on form
		
		btnBackCancel.addActionListener(new ActionListener() //add listener for action to run method
		{
			public void actionPerformed (ActionEvent evt)
			{
				btnCancelActionPerformed(); //running cancel method (same method as hitting the "x" button on the form)
			}
		});
		
		add(btnBackCancel); //adding button to JFrame
		
		repaint(); //repainting what is displayed if going coming from a different form
		revalidate(); //revalidate the elements that will be displayed
		pack(); //packaging everything up to use
		setLocationRelativeTo(null); //setting form position central
		btnStartNext.requestFocusInWindow(); //setting focus on start button when everything is loaded
	}
	
	private void btnNextActionPerformed () //code for second screen of installation (selects shortcuts to be installed)
	{
		pnlShortcut = new JPanel();
		lblArtTop = new JLabel();
		lblWelcome = new JLabel();
		lblMainTxt = new JLabel();
		lblDivider = new JLabel();
		btnStartNext = new JButton();
		btnBackCancel = new JButton();
		chkbxDesktopRun = new JCheckBox("Desktop");
		chkbxQuick = new JCheckBox("Quick Start Menu");
		
		getContentPane().removeAll();
		pnlShortcut.setVisible(true);
		add(pnlShortcut);

		removeWindowListener(exitListener);
		removeWindowListener(uninstallExitList);
		addWindowListener(exitListener); //removing before adding the windowlistener, ensures there is only one listener there
		setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE); //setting "x" button to do nothing except what exitListener does
		setPreferredSize(new Dimension(750, 500)); //setting measurements of jframe
		
		try
		{
			Image frameIcon = ImageIO.read(new File(imgDir + "\\Logo.png"));
			setIconImage(frameIcon); //trying to read and add the logo to the application
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
		setTitle("Password_Vault 1.0 Setup"); //setting title on JFrame
		setResizable(false); //disabling resizing
		setLayout(null); //ensuring I can specify element positions
		setBackground(Color.WHITE); //setting background color

		Icon topArt = new ImageIcon(imgDir + "\\topArt.jpg");
		lblArtTop.setIcon(topArt); //reading in Art to be displayed at top of JFrame
			
		lblArtTop.setBounds(0, 0, 750, 100); //setting position and measurements of art
		add(lblArtTop); //adding art to frame
		
		lblWelcome.setText("Password_Vault Setup Wizard"); //label welcoming user
		lblWelcome.setFont(lblWelcome.getFont().deriveFont(22.0f)); //changing font size to 22
		lblWelcome.setFont(lblWelcome.getFont().deriveFont(Font.BOLD)); //changing font style to bold
		lblWelcome.setBounds(208, 125, 334, 25); //setting position and measurements
		add(lblWelcome); //adding label to form
		
		lblMainTxt.setText("<html>Please select the shortcuts you'd like installed before hitting 'Start' to begin the installation: </html>"); //changing text assigned to the label
		lblMainTxt.setFont(lblMainTxt.getFont().deriveFont(16.0f)); //ensuring same font as before
		lblMainTxt.setBounds(20, 179, 720, 19); //setting bounds and position
		add(lblMainTxt); //adding it to the form
		
		chkbxDesktopRun.setSelected(true);
		chkbxDesktopRun.setFont(lblMainTxt.getFont().deriveFont(16.0f));
		chkbxDesktopRun.setBounds(50, 225, 150, 19);
		add(chkbxDesktopRun);
		
		if (!bDesktop)
			chkbxDesktopRun.setSelected(false);
			
		chkbxQuick.setSelected(true);
		chkbxQuick.setFont(lblMainTxt.getFont());
		chkbxQuick.setBounds(50, 280, 150, 19);
		add(chkbxQuick);
		
		if (!bQuick)
			chkbxQuick.setSelected(false);
		
		lblDivider.setText(""); //ensuring no text in label
		lblDivider.setBounds(10, 385, 730, 10); //setting bounds and position of dividing line
		lblDivider.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY)); //setting border to label for the dividing
		add(lblDivider); //adding it to JFrame
		
		btnStartNext.setText("Start"); //adding text to button for starting
		btnStartNext.setFont(lblMainTxt.getFont().deriveFont(14.0f)); //setting font size
		btnStartNext.setBounds(645, 415, 80, 35); //positioning start button
		
		btnStartNext.addActionListener(new ActionListener() //add listener for action to run method
		{
			public void actionPerformed (ActionEvent evt) 
			{
				if (!chkbxDesktopRun.isSelected())
					bDesktop = false;
				else
					bDesktop = true;
				
				if (!chkbxQuick.isSelected())
					bQuick = false;
				else
					bQuick = true;
				
				btnStartActionPerformed(); //running next method
			}
		});
		
		add(btnStartNext); //adding button to JFrame
		
		btnBackCancel.setText("Back"); //adding text to button for exiting
		btnBackCancel.setFont(btnStartNext.getFont()); //getting font from start button
		btnBackCancel.setBounds(20, 415, 80, 35); //positioning on form
		
		btnBackCancel.addActionListener(new ActionListener() //add listener for action to run method
		{
			public void actionPerformed (ActionEvent evt)
			{
				if (!chkbxDesktopRun.isSelected())
					bDesktop = false;
				else
					bDesktop = true;
				
				if (!chkbxQuick.isSelected())
					bQuick = false;
				else
					bQuick = true;
				
				btnBackActionPerformed(); //running cancel method (same method as hitting the "x" button on the form)
			}
		});
		
		add(btnBackCancel); //adding button to JFrame
		
		repaint(); //repainting what is displayed if going coming from a different form
		revalidate(); //revalidate the elements that will be displayed
		pack(); //packaging everything up to use
		
		btnStartNext.requestFocusInWindow();
		
		setLocationRelativeTo(null); //setting form position central
	}
		
	private void btnStartActionPerformed () //code for third screen of installation (instigates installation)
	{	
		pnlDownload = new JPanel();
		lblArtTop = new JLabel();
		lblWelcome = new JLabel();
		lblMainTxt = new JLabel();
		lblProgress = new JLabel();
		lblSearching = new JLabel();
		lblDivider = new JLabel();
		btnStartNext = new JButton();
		btnBackCancel = new JButton();
		prbrInstall = new JProgressBar();
		
		getContentPane().removeAll();
		pnlDownload.setVisible(true);
		add(pnlDownload);

		removeWindowListener(exitListener);
		removeWindowListener(uninstallExitList);
		addWindowListener(uninstallExitList); //removing before adding the windowlistener, ensures there is only one listener there
		setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE); //setting "x" button to do nothing except what exitListener does
		setPreferredSize(new Dimension(750, 500)); //setting measurements of jframe
		
		try
		{
			Image frameIcon = ImageIO.read(new File(imgDir+"\\Logo.png"));
			setIconImage(frameIcon); //trying to read and add the logo to the application
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
		setTitle("Password_Vault 1.0 Setup"); //setting title on JFrame
		setResizable(false); //disabling resizing
		setLayout(null); //ensuring I can specify element positions
		setBackground(Color.WHITE); //setting background color

		Icon topArt = new ImageIcon(imgDir+"\\topArt.jpg");
		lblArtTop.setIcon(topArt); //reading in Art to be displayed at top of JFrame
			
		lblArtTop.setBounds(0, 0, 750, 100); //setting position and measurements of art
		add(lblArtTop); //adding art to frame
		
		lblWelcome.setText("Password_Vault Setup Wizard"); //label welcoming user
		lblWelcome.setFont(lblWelcome.getFont().deriveFont(22.0f)); //changing font size to 22
		lblWelcome.setFont(lblWelcome.getFont().deriveFont(Font.BOLD)); //changing font style to bold
		lblWelcome.setBounds(208, 125, 334, 25); //setting position and measurements
		add(lblWelcome); //adding label to form
		
		lblMainTxt.setText("<html>The setup wizard is detecting your system settings and setting up files on your local hard drive used in the running of Password_Vault."
				+ "<br><br>"
				+ "Please do not close the application, installation in progress...</html>"); //changing text assigned to the label
		lblMainTxt.setFont(lblMainTxt.getFont().deriveFont(16.0f)); //ensuring same font as before
		lblMainTxt.setBounds(10, 179, 730, 77); //setting bounds and position
		add(lblMainTxt); //adding it to the form
		
    	prbrInstall.setValue(progressVal); //setting the progress bar to start at 0
		prbrInstall.setStringPainted(true); 
		prbrInstall.setBounds(75, 315, 600, 27); //positioning the bar
		prbrInstall.setMinimum(0); //setting the minimum value on the bar
		prbrInstall.setMaximum(100); //setting the maximum value on the bar
		add(prbrInstall); //adding the bar to the form
		
		lblProgress.setText(progressTxt); //setting progress label to starting
		
		lblProgress.setFont(lblMainTxt.getFont().deriveFont(12.0f)); //ensuring smaller font size than main text
		lblProgress.setBounds(75, 296, 300, 15); //setting position above the progress bar
		add(lblProgress); //adding the progress bar to the frame
		
		lblSearching.setText(""); //setting progress label to starting
		lblSearching.setFont(lblMainTxt.getFont().deriveFont(12.0f)); //ensuring smaller font size than main text
		lblSearching.setBounds(210, 296, 200, 15); //setting position above the progress bar
		add(lblSearching); //adding the progress bar to the frame
		
		lblDivider.setText(""); //ensuring no text in label
		lblDivider.setBounds(10, 385, 730, 10); //setting bounds and position of dividing line
		lblDivider.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY)); //setting border to label for the dividing
		add(lblDivider); //adding it to JFrame
		
		btnStartNext.setText("Next"); //adding text to button for starting
		btnStartNext.setFont(lblMainTxt.getFont().deriveFont(14.0f)); //setting font size
		btnStartNext.setBounds(645, 415, 80, 35); //positioning start button
		btnStartNext.setEnabled(false); //prevents user from continuing before installation is complete
		
		btnStartNext.addActionListener(new ActionListener() //add listener for action to run method
		{
			public void actionPerformed (ActionEvent evt) 
			{
				btnFinalActionPerformed(); //running next method
			}
		});
		
		add(btnStartNext); //adding button to JFrame
		
		btnBackCancel.setText("Cancel"); //adding text to button for exiting
		btnBackCancel.setFont(btnStartNext.getFont()); //getting font from start button
		btnBackCancel.setBounds(20, 415, 80, 35); //positioning on form
		
		btnBackCancel.addActionListener(new ActionListener() //add listener for action to run method
		{
			public void actionPerformed (ActionEvent evt)
			{
				btnBackInstallActionPerformed(); //running cancel method (same method as hitting the "x" button on the form)
			}
		});
		
		add(btnBackCancel); //adding button to JFrame
		
		repaint(); //repainting what is displayed if going coming from a different form
		revalidate(); //revalidate the elements that will be displayed
		pack(); //packaging everything up to use
		
		setLocationRelativeTo(null); //setting form position central

		if (!tskDone) //if the task hadn't finished
		{
			if (task == null)
			{
				task = new Task(); //instantiate a new task
				task.addPropertyChangeListener((PropertyChangeListener) this);
				task.execute(); //execute the task to start it again
			}
		}
		else //else if had finished
		{
			lblProgress.setText("Done!"); //ensure progress label was set to "Done!"
			
			if (tskCancelled) //if the user had backed off of the installation page
				if (JOptionPane.showConfirmDialog(null, "<html><center>Initial installation was cancelled<br>Would you like to start again?</center></html>", "Restart?", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION);
				{ //offering user to start installation again, if so then
					task = new Task(); //declaring new task
					task.addPropertyChangeListener((PropertyChangeListener) this);
					task.execute(); //executing the new task to run in the background
				}
		}
		
		if (task.isPaused())
			task.resume();
	}
	
	private void btnFinalActionPerformed () //code for final screen of installation
	{
		pnlFinal = new JPanel();
		lblArtTop = new JLabel();
		lblWelcome = new JLabel();
		lblMainTxt = new JLabel();
		lblDivider = new JLabel();
		btnStartNext = new JButton();
		chkbxDesktopRun = new JCheckBox("Run Password_Vault");
		
		getContentPane().removeAll();
		pnlFinal.setVisible(true);
		add(pnlFinal);

		removeWindowListener(exitListener);
		removeWindowListener(uninstallExitList);
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //setting "x" button to do nothing except what exitListener does
		setPreferredSize(new Dimension(750, 500)); //setting measurements of jframe
		
		try
		{
			Image frameIcon = ImageIO.read(new File(imgDir+"\\Logo.png"));
			setIconImage(frameIcon); //trying to read and add the logo to the application
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		
		setTitle("Password_Vault 1.0 Setup"); //setting title on JFrame
		setResizable(false); //disabling resizing
		setLayout(null); //ensuring I can specify element positions
		setBackground(Color.WHITE); //setting background color

		Icon topArt = new ImageIcon(imgDir+"\\topArt.jpg");
		lblArtTop.setIcon(topArt); //reading in Art to be displayed at top of JFrame
			
		lblArtTop.setBounds(0, 0, 750, 100); //setting position and measurements of art
		add(lblArtTop); //adding art to frame
		
		lblWelcome.setText("Password_Vault Setup Wizard"); //label welcoming user
		lblWelcome.setFont(lblWelcome.getFont().deriveFont(22.0f)); //changing font size to 22
		lblWelcome.setFont(lblWelcome.getFont().deriveFont(Font.BOLD)); //changing font style to bold
		lblWelcome.setBounds(208, 125, 334, 25); //setting position and measurements
		add(lblWelcome); //adding label to form
		
		lblMainTxt.setText("<html>Setup has finished installing Password_Vault on your computer please press \"Finish\"."
				+ "<br><br>"
				+ "Please select the options below as appropriate:</html>"); //changing text assigned to the label
		lblMainTxt.setFont(lblMainTxt.getFont().deriveFont(16.0f)); //ensuring same font as before
		lblMainTxt.setBounds(10, 179, 730, 77); //setting bounds and position
		add(lblMainTxt); //adding it to the form
		
		chkbxDesktopRun.setSelected(true);
		chkbxDesktopRun.setFont(lblMainTxt.getFont().deriveFont(16.0f));
		chkbxDesktopRun.setBounds(50, 275, 250, 19);
		add(chkbxDesktopRun);
		
		lblDivider.setText(""); //ensuring no text in label
		lblDivider.setBounds(10, 385, 730, 10); //setting bounds and position of dividing line
		lblDivider.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY)); //setting border to label for the dividing
		add(lblDivider); //adding it to JFrame
		
		btnStartNext.setText("Finish"); //adding text to button for starting
		btnStartNext.setFont(lblMainTxt.getFont().deriveFont(14.0f)); //setting font size
		btnStartNext.setBounds(645, 415, 80, 35); //positioning start button
		
		btnStartNext.addActionListener(new ActionListener() //add listener for action to run method
		{
			public void actionPerformed (ActionEvent evt) 
			{
				if (chkbxDesktopRun.isSelected())
					btnEndActionPerformed(true); //running next method
				else
					btnEndActionPerformed(false); //running next method
			}
		});
		
		add(btnStartNext); //adding button to JFrame
		
		repaint(); //repainting what is displayed if going coming from a different form
		revalidate(); //revalidate the elements that will be displayed
		pack(); //packaging everything up to use
		
		setLocationRelativeTo(null); //setting form position central
	}
	
	private void btnEndActionPerformed(boolean run)
	{
		if (run)
		{
			try
			{
				Process p = Runtime.getRuntime().exec("cmd /c start \"\" \""+exec.getAbsolutePath()+"\"");
				p.waitFor();
			}
			catch (Throwable t)
			{
				JOptionPane.showMessageDialog(null, "Failed to run Password_Vault! Please manually run the application.", "Error!", JOptionPane.OK_OPTION);
			}
		}
		
		System.exit(0);
	}
	
	private void btnBackActionPerformed ()
	{
		getContentPane().removeAll(); //removing everything from the frame
		initComponents();
	}
	
	@SuppressWarnings("static-access")
	private void btnBackInstallActionPerformed () //code for returning to the first screen from the installation section
	{
		backMsg = new JOptionPane(); //linking the option pane to a variable so that it can be referenced at a later point
		if (backMsg.showConfirmDialog(null, "<html><center>WARNING!<br>This will cancel installation<br>Are you sure you want to do this?</center></html>", "WARNING!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION)
		{ //output warning that it would cancel installation, if accepted...
			task.cancel(true); //cancel the task
			tskCancelled = true; //set the boolean variable to true incase the user returns to the installation screen after hitting back
			backMsg = null; //reassigning the variable to null for future reference
			getContentPane().removeAll(); //removing everything from the frame
			initComponents(); //calling the method that builds the first screen of the installation
		}
		else //if not accepted...
			backMsg = null; //reassigning the variable to null for future reference
	}
	
	private void btnCancelActionPerformed()
	{
		if (JOptionPane.showConfirmDialog(null, "<html><center>WARNING!<br>This will cancel installation<br>Are you sure you want to do this?</center></html>", "WARNING!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION)
		{ //output warning that it would cancel installation, if accepted...
			System.exit(0);
		}
		else //if not accepted...
		{
			if (lblMainTxt.getText().substring(0, 9).equals("<html>The"))
			{
				getContentPane().removeAll();
				initComponents();
			}
			else if (lblMainTxt.getText().substring(0, 9).equals("<html>Ple"))
			{
				if (!chkbxDesktopRun.isSelected())
					bDesktop = false;
				else
					bDesktop = true;
				
				if (!chkbxQuick.isSelected())
					bQuick = false;
				else
					bQuick = true;
				
				getContentPane().removeAll();
				btnNextActionPerformed();
			}
		}
	}
	
	@SuppressWarnings("static-access")
	private void btnCancelunInstallActionPerformed () //code for when the user presses the "Cancel" button or the "x" on the form
	{		
		mainDirectory = new File(Global_Vars.getWorkingDirectory()); //declaring a variable for the main directory of where the app is stored.
		exitMsg = new JOptionPane(); //linking the option pane to a variable so it can be referenced at a later point
		if (exitMsg.showConfirmDialog(null, "<html><center>Are you sure you wish to cancel installation?<br>Please note doing this will close all open cmd windows due to the removal of our assets!</center></html>", "Confirm?", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
		{ //offering user choice to leave, if they select yes...

			if (mainDirectory.exists()) //check if some of the installation has started already, if so...
			{
				deleteDir(mainDirectory); //delete the entirety of the Password_Vault app folder
				
				if (bDesktop && dsktpShortcut != "")
				{
					File shortcut = new File(dsktpShortcut); //declare file for desktop location
				
					if (shortcut.exists()) //if desktop shortcut exists
						shortcut.delete(); //delete it
					else
					{
						if (JOptionPane.showConfirmDialog(null, "<html><center>App could not find Desktop based on home directory!<br>Do you want the app to search for the Desktop shortcut? (This can take a while if you have multiple hard drives)</center></html>", "Warning", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) //if can't find desktop shortcut
						{
							findDir(userTemp+"\\Desktop", false); //find location of desktop (nothing outputted to user)
							shortcut = new File(foundDir+"\\Password_Vault.lnk"); //create variable based on found desktop icon
							if (shortcut.exists()) //if exists
								shortcut.delete(); //delete directory
							else //else
								JOptionPane.showMessageDialog(null, "<html><center>App could not find Desktop!<br>Desktop shortcut not deleted!</center></html>", "Warning", JOptionPane. OK_OPTION); //warn user of remaining desktop icon as could not find it.
						}
					}
				}
				
				if (quickShortcut != "")
				{
					File shortcut = new File(quickShortcut); //declare file for desktop location
					
					if (shortcut.exists()) //if desktop shortcut exists
						shortcut.delete(); //delete it
					else
					{
						if (JOptionPane.showConfirmDialog(null, "<html><center>App could not find Start Menu files!<br>Do you want the app to search for the Start Menu shortcut? (This can take a while if you have multiple hard drives)</center></html>", "Warning", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) //if can't find desktop shortcut
						{
							findDir("\\Start Menu\\Programs\\Password_Vault.lnk", false); //find location of desktop (nothing outputted to user)
							shortcut = new File(foundDir + "\\Start Menu\\Programs\\Password_Vault.lnk"); //create variable based on found desktop icon
							if (shortcut.exists()) //if exists
								shortcut.delete(); //delete directory
							else //else
								JOptionPane.showMessageDialog(null, "<html><center>App could not find Desktop!<br>Desktop shortcut not deleted!</center></html>", "Warning", JOptionPane. OK_OPTION); //warn user of remaining desktop icon as could not find it.
						}
					}
				}
			}
					
			try
			{
				Runtime.getRuntime().exec("taskkill /f /im cmd.exe"); //try to close all open cmd windows
			}
			catch (Exception e)
			{
				e.printStackTrace();
			}
			
			System.exit(0); //shutdown the system
		}
		else //if they don't want to cancel then...
		{
			exitMsg = null; //reset the variable name to null for use in the future
			progressVal = prbrInstall.getValue(); //saving value on progress bar
			progressTxt = lblProgress.getText();
			getContentPane().removeAll(); //removing assets on form
			btnStartActionPerformed(); //calling method to continue task
		}
	}

	public void propertyChange (PropertyChangeEvent evt) //code to detect update for progress bar
	{
		if ("progress" == evt.getPropertyName()) //detecting when a change from the background thread is pushed
		{
			int progress = (Integer) evt.getNewValue();
			
			prbrInstall.setValue(progress); //sets progress bar to new value based on what was retreaved from the background thread
		}
	}
	
	public void deleteDir (File file) //code for deleting an entire directory
	{
		File[] contents = file.listFiles(); //gets all file into array of files
		if (contents != null) //if there are files in the list then...
			for (File f : contents) //for every file in the list
				deleteDir(f); //pass it into the current method for another iteration
		
		file.delete(); //if the list is empty (no files in a directory) then delete the file
	}
		
	public static void main (String args[]) //method for setting the look of the UI and first part that is ran in the class
	{
		try
		{
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); //get look and feel based on OS
		}
		catch (ClassNotFoundException ex) //catch all errors that may occur
		{
			Logger.getLogger(Uninstall.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (InstantiationException ex)
		{
			Logger.getLogger(Uninstall.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (IllegalAccessException ex)
		{
			Logger.getLogger(Uninstall.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		catch (UnsupportedLookAndFeelException ex)
		{
			Logger.getLogger(Uninstall.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		
		EventQueue.invokeLater(new Runnable()
		{
			public void run() //run the class's constructor, therefore starting the UI being built
			{
				new Uninstall().setVisible(true);
			}
		});
	}

	public boolean dirExists () //check if the mainDirectory exists again
	{
		if (backMsg != null || exitMsg != null) //uses variables linked to JOptionPanes to see if any are displaying, if one is showing...
			while (true) //constantly run
			{
				if (backMsg == null && exitMsg == null) //as soon as the JOptionPanes are not open
					break; //leave loop
				else //if still open
				{
					try
					{
						Thread.sleep(10); //thread waits before continuing loop
					}
					catch (Exception ex)
					{}
				}
			}
		
		if (JOptionPane.showConfirmDialog(null, "<html><center>App directory already exists!<br>Do you wish to carry on with installation? (All previous data will be removed)</center></html>", "Confirm?", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)
		{ //Detected the directory already exists, asks if user wants to continue, if not...
			btnBackCancel.setEnabled(false); //disable the back button to prevent them starting the installation again
			return false; //returned false as not continuing
		}
		return true; //return true to continue
	}
	
	public String findDir (String target, boolean output) //first method called to search entire drive (file passed in is what is being searched for)
	{
		foundDir = "";
		File[] tempPaths; //File array used while putting C to the top of the search list
		File[] paths = File.listRoots(); //File array that will contain the ordered disk drives before searching 

		// returns pathnames for files and directory
		tempPaths = File.listRoots();

		int i = 0;
		File c = new File("C:\\"); //used with assigning C drive to be first searched drive as most likely location of file
		for (File temp : tempPaths) //for each drive in the available drives
			if (temp.equals(c)) //if c drive is selected
				paths[0] = temp; //place c path into first element of File array
			else //if not
			{
				i =+ 1; //counter to ensure drives don't over write older drives
				paths[i] = temp; //adding drive to last element in File array
			}
				
		
		for(File path:paths) // for each pathname in pathname array
		{
			findDir(target, path, output); //call overload method to search specific drive for file
			if (!foundDir.equals(null)) //if null isn't returned
				return foundDir; //return the string that has the path
		}
		return null; //if nothing found return null
	}
	
	public void findDir (String target, File drive, boolean output) //overload method of findDir for second iterative step of finding
	{
		ArrayList<File> contents = new ArrayList<File>(); //arraylist for handling contents of current directory being searched
		
		File[] driveList = drive.listFiles(); //File array that gets full list of drive contents
		
		if (driveList != null) //listFiles will return null if item is a single file, if files are within the drive
			for (File item : driveList) //for every item in drive
				if (System.getProperty("os.name").toUpperCase().contains("WIN")) //check on windows
					if (item.getPath().substring(1).equals(":\\Users")) //most common place for file to be stored is "Users" directory, without including drive letter allows reordering across entire system
					{
						File temp = contents.get(0); //temporarily store current value of contents element 0
						contents.set(0, item); //put "users" directory to be searched first
						contents.add(temp); //add value that was originally first to end of list
					}
					else
						contents.add(item); //just add to list if doesn't match if
				else
					contents.add(item); //just add to list if doesn't match if
		
		if (contents.size() != 0) //if there are files in the list then...
			for (File f : contents) //for every file in the list
			{
				findDir(target, f, output); //pass it into the current method for another iteration
				if (foundDir != "") //if file found drop out of loop
					break;
			}
				
		if (output = true)
			if (foundDir == "")
				lblSearching.setText(drive.getPath());
		
		if (drive.getPath().length() > target.length()) //ensuring that drive is longer than target address so no errors when using substring
			if (drive.getPath().substring(drive.getPath().length() - target.length()).equals(target)) //if last part of path matches target file
			{
				foundDir = drive.getPath(); //add found directory to variable to be passed back
				lblSearching.setText("");
			}
	}
	
	public void getProperty (String cmd, int cmdNum) //code to collect unique identifier information
	{
		try
		{
			Process p = Runtime.getRuntime().exec("cmd /c " + cmd); //running cmd command to retrieve disk serialnumbers
			p.waitFor();
			BufferedReader reader = new BufferedReader( //buffered reader to read output from cmd command
					new InputStreamReader(p.getInputStream())
			);
			
			String line;
			Pattern pat = Pattern.compile("[ \t]", Pattern.CASE_INSENSITIVE); //regex pattern to remove blank lines
			
			while ((line = reader.readLine()) != null) //ensuring that all results are covered
			{
				Matcher match = pat.matcher(line.substring(0)); //declaring matcher to check the entirety of the line
				if (cmdNum == 1) //if first command
					if (!line.equals("") && match.find() && !line.equals("SerialNumber       ")) //makes sure not a blank line or the title of the command
						serialNumbers.add(line); //will add all valid serial numbers
				if (cmdNum == 2) //if second command
					if (!line.equals("") && match.find() && !line.equals("SerialNumber  ")) //makes sure not a blank line or the title of the command
					{
						serialNumbers.add(line); //will add all valid serial numbers
						userTemp = line;
					}
				if (cmdNum == 3) //if third command
				{
						serialNumbers.add(line); //will add user name as is first thing returned
						userTemp = line;
				}
				if (cmdNum == 4) //if fourth command
					if (!line.equals("") && match.find() && !line.equals("Physical Address    Transport Name                                            ") && !line.equals("=================== ==========================================================")) //makes sure not blank line, title of output or separating line
						if (line.substring(0, 17).contains("N/A")) //if the line is "N/A"
							serialNumbers.add(line.substring(0, 3)); //only add "N/A" rather than extending to include excessive spacing after it
						else //else
							serialNumbers.add(line.substring(0, 17)); //only add first 17 characters of line (the user's MAC address)
			}
		}
		catch (IOException | InterruptedException e) //catch any errors that may occur
		{
			JOptionPane.showMessageDialog(null, "<html><center>Unique Identifier information not retrieved!<br></center></html>", "Warning", JOptionPane.WARNING_MESSAGE); //throw information that an error has occurred
			lblProgress.setText("Error...");
		}
	}

	public String SHAHash (String input) throws NoSuchAlgorithmException //method for hashing information using SHA-256
	{
		MessageDigest messageDigest = MessageDigest.getInstance("SHA-256"); //message digest finding hash information
		messageDigest.update(input.getBytes(Charset.forName("UTF-8")), 0, input.length()); //updating message digest with necessary information for hash
		return new BigInteger(1, messageDigest.digest()).toString(16); //returning input as a hashed value
	}

	public void dqShortcut (boolean Desktop) //method for creating either desktop shortcut or shortcut for the start menu
	{		
		File dsktpShortcutFile = null;
		try
		{
			PrintWriter writer = new PrintWriter("createShortcut.bat", "UTF-8"); //declaring print writer, uses file location & char-set
			
			writer.println ("@echo off"); //print writer is outputting to the previously specified file
			writer.println("echo Set oWS = WScript.CreateObject(\"WScript.Shell\") > CreateShortcut.vbs"); //print writer is outputting to the previously specified file
			if (bDesktop)
				writer.println("echo sLinkFile = \"%HOMEDRIVE%%HOMEPATH%\\Desktop\\Password_Vault.lnk\" >> CreateShortcut.vbs"); //print writer is outputting to the previously specified file
			else
				writer.println("echo sLinkFile = \"%CSIDL_COMMON_STARTMENU%\\Password_Vault.lnk\" >> CreateShortcut.vbs"); //print writer is outputting to the previously specified file
			writer.println("echo Set oLink = oWS.CreateShortcut(sLinkFile) >> CreateShortcut.vbs"); //print writer is outputting to the previously specified file
			writer.println("echo oLink.TargetPath = \"" + exec.getAbsolutePath() + "\" >> CreateShortcut.vbs"); //print writer is outputting to the previously specified file
			writer.println("echo oLink.IconLocation = \""+ newAssetDir+"\\Logo.ico\"  >> CreateShortcut.vbs");
			writer.println("echo oLink.Save >> CreateShortcut.vbs"); //print writer is outputting to the previously specified file
			writer.println("cscript CreateShortcut.vbs"); //print writer is outputting to the previously specified file
			writer.println("del CreateShortcut.vbs"); //print writer is outputting to the previously specified file
			writer.println("exit");
			
			writer.close(); //close print writer to commit information to txt file.
			Thread.sleep(1000);
		}
		catch(Throwable t)
		{}
		
		try
		{
			Process p = Runtime.getRuntime().exec("cmd /c echo %HOMEDRIVE%%HOMEPATH%\\Desktop\\Password_Vault.lnk"); //running cmd command to retrieve disk serialnumbers
			p.waitFor();
			BufferedReader reader = new BufferedReader( //buffered reader to read output from cmd command
					new InputStreamReader(p.getInputStream())
			);
			
			String line;
			
			while ((line = reader.readLine()) != null) //ensuring that all results are covered
			{
				if (line.contains("Password_Vault.lnk")) //ensuring correct directory
				{
					dsktpShortcutFile = new File (line); //declaring variable of where desktop shortcut is
					dsktpShortcut = line;
				}
			}
			
			if (dsktpShortcutFile == null)
			{
				findDir("Desktop\\Password_Vault.lnk", false);
				dsktpShortcutFile = new File (foundDir);
			}
		}
		catch (IOException | InterruptedException e)
		{}
		
		try 
		{
			Process p = Runtime.getRuntime().exec("cmd /c "+runDir+"\\createShortcut.bat\""); //running created batch file
			p.waitFor();
		} 
		catch (IOException | InterruptedException e) 
		{
			e.printStackTrace();
		}

		File bat = new File ("createShortcut.bat"); //creating variable to remove trace of batch file that was created during setup
		
		bat.delete(); //deleting temp file
		
		//copies desktop shortcut to start menu - requires Admin permissions
		if (!Desktop)
		{
			quickShortcut = "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Password_Vault.lnk";
			File quickShortcutFile = new File (quickShortcut);
			try 
			{
				@SuppressWarnings("unused")
				Path vaultBytes = Files.copy( //try copying the entire file from:
						dsktpShortcutFile.toPath(), //current position
						quickShortcutFile.toPath(), //to start menu position
						StandardCopyOption.REPLACE_EXISTING, //replace any duplicates in there
						StandardCopyOption.COPY_ATTRIBUTES, //ensure all attributes are the same
						LinkOption.NOFOLLOW_LINKS);
			} 
			catch (IOException e) 
			{
				e.printStackTrace();
				quickShortcut = "";
			}
			
			dsktpShortcutFile.delete(); //deleting desktop icon, if icon is desired, will be created in next instance
		}
	}
	
	//objects used in UI
	private JPanel pnlStart;
	private JPanel pnlShortcut;
	private JPanel pnlDownload;
	private JPanel pnlFinal;
	private JLabel lblArtTop;
	private JLabel lblWelcome;
	private JLabel lblMainTxt;
	private JLabel lblDivider;
	private JLabel lblProgress;
	private JLabel lblSearching;
	private JButton btnStartNext;
	private JButton btnBackCancel;
	private JCheckBox chkbxDesktopRun;
	private JCheckBox chkbxQuick;
	private JProgressBar prbrInstall;
	private static JOptionPane backMsg;
	private static JOptionPane exitMsg;
	
	//variables used when declaring File
	private String runDir = "";
	private String imgDir = "";
	private String foundDir = "";
	private String userTemp = "";
	private File mainDirectory;
	private File newAssetDir;
	private File exec;
	
	//boolean variables for decision making
	private boolean tskDone = false;
	private boolean tskCancelled = false;
	private boolean bDesktop = true;
	private boolean bQuick = true;
	
	//variables for main installation
	private int progressVal = 0;
	private String dsktpShortcut;
	private String quickShortcut;
	private String progressTxt = "Starting...";
	private ArrayList<String> serialNumbers = new ArrayList<String>();
}